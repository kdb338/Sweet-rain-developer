# 2차원 배열, 딕셔너리, 리스트

#Jobs = ["전사", "마법사", "궁수","도적","해적"]
#First_lass = ["검사","매지션","아처","로그","해적"]
#Second_class = ["파이터","페이지","스피어맨","위자드","클레릭","헌터","사수","어쌔신","시프","인파이터","건슬링거"]
#Third_class = ["크루세이더","나이트","버서커","메이지","프리스트","레인저","저격수","허밋","시프마스터","버커니어","발키리"]
#Fourth_class = ["히어로","팔라딘","다크나이트","아크메이지","비숍","보우마스터","신궁","나이트로드","섀도어","바이퍼","캡틴"]

# 직업 데이터를 딕셔너리와 리스트로 표현
jobs = {
    "전사": [
        ["1차 전직", ["검사"]],
        ["2차 전직", ["파이터", "페이지", "스피어맨"]],
        ["3차 전직", ["크루세이더", "나이트", "버서커"]],
        ["4차 전직", ["히어로", "팔라딘", "다크나이트"]],
    ],
    "마법사": [
        ["1차 전직", ["매지션"]],
        ["2차 전직", ["위자드", "클레릭"]],
        ["3차 전직", ["메이지", "프리스트"]],
        ["4차 전직", ["아크메이지", "비숍"]],
    ],
}

# 직업의 전직 단계를 찾는 함수
def find_job(job_category, job_name):
    if job_category in jobs:  # 해당 직업군이 존재하는지 확인
        for stage, (job_stage, job_list) in enumerate(jobs[job_category], start=1):
            if job_name in job_list:
                return f"{job_name}은(는) {job_category}의 {stage}차 전직입니다."
    return f"{job_name}은(는) {job_category}의 전직 경로에 없습니다."

# 테스트 실행
result = find_job("전사", "크루세이더")
print(result)  # 크루세이더은 전사의 3차 전직입니다.

#나머지 3개 직업도 넣고, 모든 데이터를 한 꺼번에 출력, 챗gpt 선생님이 알려준 함수 공부하기!




